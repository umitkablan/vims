*tinykeymap.txt*    Tiny, temporary keymaps
                    Author: Tom Link, micathom at gmail com

This plugin is a 90% clone of Andy Wokula's tinymode (vimscript #2223). 
It takes a different approach that hopefully avoids certain problems 
without creating new ones. tinymode actually creates maps to do its job, 
tinykeymap only creates maps for the entry sequence and uses the 
|getchar()| function to handle further input.

This plugin lets users define "temporary keymaps", a.k.a. tinykeymaps, 
with the |tinykeymap#EnterMap()| function. Users can define a map to 
activate a tinykeymap. Users can then use single key shortcuts to 
trigger commands defined with |tinykeymap#Map()|. Pressing an undefined 
key or <Esc>, deactivates the tinykeymap.

Example usage: Define a tinykeymap to make it easier to ...

    - operate on windows
    - operate on tabs
    - operate on text

Example definition for a "tabs" tinykeymap (heavily based on Andy 
Wokula's tabs mode for tinymode): >

    call tinykeymap#EnterMap('tabs', 'gt', {'name': 'Tabs mode'})
    call tinykeymap#Map('tabs', 'n', 'tabnew') 
    call tinykeymap#Map('tabs', 't', 'norm! gt') 
    call tinykeymap#Map('tabs', 'T', 'norm! gT') 
    call tinykeymap#Map("tabs", "^", "tabfirst")
    call tinykeymap#Map("tabs", "$", "tablast")
    call tinykeymap#Map("tabs", "c", "tabclose")

Example use of the above tinykeymap: E.g. pressing gt3n^c2t will:

    gt ... Enter tabs mode
    3n ... create 3 new tabs,
    ^  ... select the first one,
    c  ... close it, and
    2t ... move to the second tab on the right.

A tinykeymap is exited (1) by pressing <Esc> or (2) by timeout (see 
|g:tinykeymap#timeout|).

tinykeymap comes with the following pre-defined tinykeymaps:

    tabs    gt        :: Operate on tabs
    windows <C-W>     :: Operate on windows
    buffers <Leader>b :: Operate on buffers
    undo    <Leader>u :: Operate on the |undo| tree

Differences to tinymode:

    - tinykeymaps and maps may have options (optional)
    - tinykeymaps can be buffer-local
    - dealing with [count] is easier (if a map contains "<count>", this 
      placeholder is replaced with the current [count], i.e. a 
      previously entered number; otherwise the expression is evaluated 
      [count] times)
    - avoid a certain misleading error message


-----------------------------------------------------------------------
Install~

In order to install the vba, open the vba file in VIM and type: >

    :so %

See :help vimball for details.

By default, tinykeymap will load all tinykeymaps in your 'runtimepath'. 
If this is not what you want, set |g:tinykeymaps_default| in your 
|vimrc| file.

Also available via git: http://github.com/tomtom/tinykeymap_vim/


========================================================================
Contents~

        g:tinykeymaps_default ............. |g:tinykeymaps_default|
        g:tinykeymap#conflict ............. |g:tinykeymap#conflict|
        g:tinykeymap#timeout .............. |g:tinykeymap#timeout|
        g:tinykeymap#resolution ........... |g:tinykeymap#resolution|
        tinykeymap#Load ................... |tinykeymap#Load()|
        tinykeymap#EnterMap ............... |tinykeymap#EnterMap()|
        tinykeymap#Map .................... |tinykeymap#Map()|
        tinykeymap#PressEnter ............. |tinykeymap#PressEnter()|
        g:tinykeymap#buffers#map .......... |g:tinykeymap#buffers#map|
        g:tinykeymap#windows#map .......... |g:tinykeymap#windows#map|
        g:tinykeymap#undo#map ............. |g:tinykeymap#undo#map|
        g:tinykeymap#tabs#map ............. |g:tinykeymap#tabs#map|


========================================================================
plugin/tinykeymap.vim~

                                                    *g:tinykeymaps_default*
g:tinykeymaps_default          (default: ["*"])
    A list tinykeymaps that should be loaded on startup.
    The list may also include |wildcards|. A value of "*" make 
    tinykeymap load all available tinykeymaps.
    See also |tinykeymap#Load()|.


========================================================================
autoload/tinykeymap.vim~

                                                    *g:tinykeymap#conflict*
g:tinykeymap#conflict          (default: 0)
    Conflict resolution if a map is already defined (see 
    |tinykeymap#EnterMap|):
      0 ... Don't create a lead map
      1 ... Don't create a lead map and display a message
      2 ... Create a new lead map and display a message
      3 ... Create a new lead map
      4 ... Throw an error

                                                    *g:tinykeymap#timeout*
g:tinykeymap#timeout           (default: 5000)

                                                    *g:tinykeymap#resolution*
g:tinykeymap#resolution        (default: "200m")

                                                    *tinykeymap#Load()*
tinykeymap#Load(maps)
    Load pre-defined tinykeymaps.
    [maps] is either a single name or a list of names.

    Run >
        :echo globpath(&rtp, 'autoload/tinykeymap/*.vim')
<   for a list of available tinykeymaps.

                                                    *tinykeymap#EnterMap()*
tinykeymap#EnterMap(name, map, ?options={})
    If you press [map], the tinykeymap [name] becomes effective.

    Pressing <Esc> or an undefined key, causes the tinykeymap to stop. If 
    an undefined keymap is pressed right after [map], [map][key] is queued 
    for processing via |feedkeys()|.

    Options may contain the following keys:
      mode ... A map mode (see |maparg()|)
      buffer ... Make the tinykeymap buffer-local
      message ... An expression that returns a message string (the string 
          will be shortened if necessary
      start ... An expression |:execute|d before entering the map
      stop ... An expression |:execute|d after leaving the map
      after ... An execute |:execute|d after processing a character

    CAUTION: Currently only normal mode maps (mode == "n") are supported. 
    It is possible to define other type of maps but the behaviour is 
    untested/undefined.

                                                    *tinykeymap#Map()*
tinykeymap#Map(name, key, expr, ?options={})
    When the tinykeymap [name] is in effect, pressing [key] causes [expr] 
    to be |:execute|d.

    [key] must not be <Esc>, <Del> or <F1>. If [key] is a numeric value, 
    such a map could cause conflicts when using a [count].

    The following keys are handled by tinykeymaps and can/should not be 
    used in maps since they may cause conflicts.

      Numeric value ... Add to [count]
      <Esc> ... Exit a tinykeymap
      <Del> ... Remove the last digit from [count]
      <F1>  ... Display some help

    Any occurence of "<count>" in [expr] is replaced with the current 
    [count]. Occurences of "<lt>" are replaced with "<".
    "<count1>" works similar but a value of 1 is inserted anyway.

    Options may contain the following keys:
      name ... The key's name (to be displayed in the help)
      exit ... If true, exit the current tinykeymap after evaluating 
              [expr]

                                                    *tinykeymap#PressEnter()*
tinykeymap#PressEnter()


========================================================================
autoload/tinykeymap/buffers.vim~

                                                    *g:tinykeymap#buffers#map*
g:tinykeymap#buffers#map       (default: g:mapleader ."b")
    Map leader for the "buffers" tinykeymap.


========================================================================
autoload/tinykeymap/windows.vim~

                                                    *g:tinykeymap#windows#map*
g:tinykeymap#windows#map       (default: "<C-W>")
    Map leader for the "windows" tinykeymap.


========================================================================
autoload/tinykeymap/undo.vim~

                                                    *g:tinykeymap#undo#map*
g:tinykeymap#undo#map          (default: g:mapleader ."u")
    Map leader for the "undo" tinykeymap.
    If the undotree plugin is available, |:UndotreeToggle| will be 
    called when entering the undo tinykeymap.


========================================================================
autoload/tinykeymap/tabs.vim~

                                                    *g:tinykeymap#tabs#map*
g:tinykeymap#tabs#map          (default: "gt")
    Map leader for the "tabs" tinykeymap.



vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
